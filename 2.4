#include <stdio.h> 
#include <string.h>


#define BUFFERSIZE 100
#define MAX 10000
	typedef struct { 
	int key; /* Record's key */ 
	long off; /* Record's offset in file */ 
	} index_S; 
	
	index_S prim[sizeof(index_S)*10000];
		
	typedef struct { 
	long siz; /* Hole's size */ 
	long off; /* Hole's offset in file */ 
	} avail_S;
	
	avail_S availList[sizeof(avail_S)*10000];
	int count=0;
	int avail=0;
	char *policy;
	char *data_file;


long check_avail(long rec_size)
{

	if(avail==0)
	{
	return -1;
	}
		
	
	//go through the availability list to find offset
	else
	{
			if(!strcmp(policy,"--first-fit"))
			{
				long avail_offset=0; 
				int size=0;
				
				int n=0;
				while(n<avail)
				{
					if(availList[n].siz>=rec_size)
					{
						avail_offset=availList[n].off;
						size=availList[n].siz;
						if(availList[n].siz==rec_size)
						{
							while(n<avail-1)
							{
								availList[n].off=availList[n+1].off;
								availList[n].siz=availList[n+1].siz;
								n++;
							}
							avail--;
						}
						else{
						
						availList[n].siz=availList[n].siz-rec_size;
						availList[n].off=availList[n].off+rec_size;
					}
						return avail_offset;
					}
					else
						n++;
					
				}
				
				
			}
				
			else if(!strcmp(policy,"--best-fit"))	
			{
				//printf("best fit");
				long min=MAX;
				int index=0;
				long sendoffset=-1;
				int n=0;
				while(n<avail)
				{
					
					if((availList[n].siz-rec_size)<min&&(availList[n].siz-rec_size)>=0)
					{
						min=availList[n].siz-rec_size;
						sendoffset=availList[n].off;
						index=n;
						n++;
						
					}
					
					else
						n++;
				}
				
				// check if min equals 0, if so, move entries in availability lists from that index onwards
				if(min==0)
				{
					
					while(index<avail-1)
					{
					
						availList[index].off=availList[index+1].off;
						availList[index].siz=availList[index+1].siz;
						index++;
					}
					avail--;
				}
				
				else
				{
				availList[index].siz=min;
				availList[index].off=availList[index].off+rec_size;
				}	
				
				return sendoffset;
			}
			
			else if(!strcmp(policy,"--worst-fit"))
			{
				//printf("worst fit");
				long max=-1;
				int index=0;
				long offset=-1;
				int n=0;
				while(n<avail)
				{
				
					if((availList[n].siz-rec_size)>max&&(availList[n].siz-rec_size)>=0)
					{
						max=availList[n].siz-rec_size;
						offset=availList[n].off;
						index=n;
						n++;
					}
					else
					n++;
				}
				
					//check if max equals 0, if so, move entries in availability lists from that index onwards
				if(max==0)
				{
					while(index<avail-1)
					{
						availList[index].off=availList[index+1].off;
						availList[index].siz=availList[index+1].siz;
						index++;
					}
					avail--;
					
					
				}
				
				else{
				availList[index].siz=max;
				availList[index].off=availList[index].off+rec_size;
							
				}
				
				
				return offset;
			}
	}
	return -1;
}


void insertIntoIndex(char rec_key[], long rec_offset)
{

	int key_val=atoi(rec_key);
	
 //use insertion sort on index.bin to insert new record
 
 if(count==0)
 {


	prim[0].key=key_val;
	prim[0].off=rec_offset;

}
	else{
	int n=count;
 	int i = n-1;

     while(key_val<prim[i].key && i>=0)

     {
           prim[i+1].key = prim[i].key;
           prim[i+1].off = prim[i].off;
           i--;
     }

     prim[i+1].key = key_val;
     prim[i+1].off = rec_offset;
     n++;
}
count++;
}


void add(char key[], char rec[])
{
	long len=0;

	char *buf; /* Buffer to hold student record */ 
	FILE *fp; /* Input/output stream */ 
	long rec_off; /* Record offset */ 
	int rec_siz; /* Record size, in characters */ 
		signed long addoffset=-1;
		long total_size = 0;
		long out_offset=0;
			len=strlen(rec);
			total_size=len+sizeof(int);
			//printf("total size :%ld\n",total_size);
		if(key_exists(key))	
		{					//check if key already exists in the index.bin
    		printf("Record with SID=%s exists\n", key);
    		return;
    	}
		fp = fopen( data_file, "ab" );
			 addoffset = check_avail(total_size);				//check_avail to return offset at which record has to be inserted in the student.db file
    		if(addoffset==-1)
    		{
    			    total_size=len+sizeof(int);	
					fwrite(&len, 1,sizeof(int), fp);
					fwrite(rec, 1, len, fp);
					out_offset = ftell(fp)-total_size;
					insertIntoIndex(key,out_offset);
 
    		}
    		else
    		{
    			    fclose(fp);
    			    printf("\nOffset is %ld\n", addoffset);
			
    				fp = fopen(data_file, "rb+" );
    				fseek(fp,addoffset,SEEK_SET);
    				fwrite(&len, 1,sizeof(int), fp);
					fwrite(rec, 1, len, fp);
					insertIntoIndex(key,addoffset);
    				
    		}
    		fclose(fp);
    		
	}
	


int key_exists(char key_str[])		//check if primary key exists in the index.bin using binary search
{
	int key=atoi(key_str);
	int isFound=0;
	
	//binary bearch for the key
	
	int first = 0;
	int last = count - 1;
    int middle = (first+last)/2;
 
   while( first <= last )
   {
      if ( prim[middle].key < key )
         first = middle + 1;    
      else if ( prim[middle].key == key ) 
      {
         isFound=1;
         return isFound;
         break;
      }
      else
         last = middle - 1;
 		 middle = (first + last)/2;
   }
   if ( first > last )
      return isFound;

	
}

void del(char key_str[])
{
	
	int key=atoi(key_str);
	long offset;int a;
	
	//binary bearch for the key
	int first = 0;int c;
	int last = count - 1;
    	int middle = (first+last)/2;
 
   while( first <= last )
   {
      if ( prim[middle].key < key )
         first = middle + 1;    
      else if ( prim[middle].key == key ) 
      {
      	offset = prim[middle].off;
      	a=prim[middle].key;
      	
        //delete entry from index file 
 		for ( c = middle ; c < count - 1 ; c++ )
 	     {
      		prim[c].key = prim[c+1].key;
      		prim[c].off = prim[c+1].off;
      	 }
      	 c--;
      	 count-=1;
      	 
      	 //Add offset and size in availibility list
      	int rec_size;
      	FILE *file;   
		file = fopen(data_file, "rb");
		fseek( file, offset , SEEK_SET ); //reading offset element
		fread( &rec_size, sizeof( int ), 1, file );
		
		availList[avail].off=offset;
		availList[avail].siz=rec_size+sizeof(int);
		avail++;
        fclose(file);
         break;
      }
      else
         last = middle - 1;
 		 middle = (first + last)/2;
 	}
   if ( first > last )
      printf("No record with SID=%d exists\n",key);
	
	
}

void find(char key_str[])
{
	int key=atoi(key_str);
	
	
	//binary bearch for the key
	FILE *file_name;   
	file_name = fopen(data_file, "rb");
	int first = 0;
	int last = count - 1;
    int middle = (first+last)/2;
    long find_offset;
    char *record_buf;
    int rec_size;
         
     while( first <= last )
     {
      if ( prim[middle].key < key )
         first = middle + 1;    
      else if ( prim[middle].key == key ) 
      {
      	 find_offset=prim[middle].off;
         
		 // read record from binary file at offset
         fseek( file_name, find_offset , SEEK_SET ); //reading offset element for size o record
		 fread( &rec_size, sizeof( int ), 1, file_name );
		 
		 record_buf=malloc(rec_size);
		 fread(record_buf, rec_size, 1, file_name );
		 printf("%s\n",record_buf);
		 
         break;
      }
      else
         last = middle - 1;
 		 middle = (first + last)/2;
   }
   if ( first > last )
      printf("No record with SID=%d exists\n",key);
	fclose(file_name);
}

void end()
{
	long hole_space=0;
	int j;
	
	//write index to index.bin
	FILE *out; /* Output file stream */ 
	out = fopen( "index.bin", "wb" ); 
	fwrite( prim, count*sizeof(int)+count*sizeof(long), 1, out ); 
	fclose( out );
	
	//print key offset
	printf("Index:\n");
	for(j=0;j<count;j++){
		printf("key=%d: offset=%ld\n", prim[j].key, prim[j].off);
	}
	
	
	out = fopen( "avail_list.bin", "wb" ); 
//	printf(" AVAIL value %d\n",avail);
	
	fwrite( availList, 2*avail*sizeof(long), 1, out ); 
	fclose( out );
	
	//print availability size offset
	printf("Availability:\n");
	
	//*****sort availibity list
/*	int comparator(const void *p, const void *q) 
	{
    int l = ((struct Student *)p)->marks;
    int r = ((struct Student *)q)->marks; 
    return (l - r);
	}
	
	qsort(values, 5, sizeof(int), cmpfunc);
*/	
	
	for(j=0;j<avail;j++)
	
		{
			hole_space+=availList[j].siz;
			printf("size=%ld: offset=%ld\n", availList[j].siz, availList[j].off);
		}
	printf("Number of holes: %d\n",avail);
	printf("Hole space: %ld\n",hole_space);
	
}

int main (int argc, char *argv[])
{
	
	int c;
	FILE *file;   
	file = fopen("input-02.txt", "r");
//	file=stdin;
	

	char command[10];
	char key[30];
	char rec[100];
	
//	policy=argv[1];
//	data_file=argv[2];
policy="--first-fit";
data_file="student.db";
//	printf("%s\n",data_file);

FILE *data;
data=fopen("student.db", "r");
FILE *index;
FILE *aList;

	if(data!=NULL)
	{
		index=fopen("index.bin", "r");
		int i=0;
		while(!feof(index))
		{
			fread(&prim[i].key,sizeof(int),1,index);
			fread(&prim[i].off,sizeof(long),1,index);
			i++;
			count++;
		}
		count--;
		fclose(index);
		
		
		aList=fopen("avail_list.bin", "r");
		i=0;
		while(!feof(aList))
		{
			fread(&availList[i].siz,sizeof(long),1,aList);
			fread(&availList[i].off,sizeof(long),1,aList);
			i++;
			avail++;
		}
		avail--;
		fclose(aList);
		fclose(data);
	}
	

	 if (file == NULL) {
        printf("Error opening file.\n");
    } else {
        while (!feof(file)) {
           fscanf(file,"%s",command);
            
            if (!strcmp(command,"add"))
            {
            fscanf(file,"%s%s",key,rec);
            add(key,rec);
            
       		}
       		
       		else
       			if(!strcmp(command,"find"))
       			{
            		fscanf(file,"%s",key);
            		find(key);
       			}
       			
       		else
       			if(!strcmp(command,"del"))
       			
				   {
            		fscanf(file,"%s",key);
            		del(key);
       			}
       			
       		else
       			if(!strcmp(command,"end"))
       			{
       				
            		end();		//write to file and print final output for index and availability list
            		break;
       			}
        }
    }
    fclose(file);
  
}
